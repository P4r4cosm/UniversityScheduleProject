{
  "name": "neo4j-sink",
  "config": {
    "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
    "tasks.max": "1",
    "topics": "postgres.public.students,postgres.public.groups,postgres.public.departments,postgres.public.institutes,postgres.public.specialities,postgres.public.courses,postgres.public.lectures,postgres.public.schedules,postgres.public.visits,postgres.public.materials",
    "key.converter": "org.apache.kafka.connect.json.JsonConverter",
    "key.converter.schemas.enable": "false",
    "value.converter": "org.apache.kafka.connect.json.JsonConverter",
    "value.converter.schemas.enable": "false",
    "errors.tolerance": "all",
    "errors.log.enable": "true",
    "errors.log.include.messages": "true",
    "neo4j.server.uri": "bolt://neo4j:7687",
    "neo4j.authentication.basic.username": "neo4j",
    "neo4j.authentication.basic.password": "password",
    "neo4j.topic.cypher.postgres.public.students": "MERGE (s:Student {id: event.after.id}) SET s.full_name = event.after.full_name, s.record_book_number = event.after.record_book_number, s.group_id = event.after.group_id",
    "neo4j.topic.cypher.postgres.public.groups": "MERGE (g:Group {id: event.after.id}) SET g.name = event.after.name, g.speciality_id = event.after.speciality_id",
    "neo4j.topic.cypher.postgres.public.departments": "MERGE (d:Department {id: event.after.id}) SET d.name = event.after.name, d.institute_id = event.after.institute_id",
    "neo4j.topic.cypher.postgres.public.institutes": "MERGE (i:Institute {id: event.after.id}) SET i.name = event.after.name",
    "neo4j.topic.cypher.postgres.public.specialities": "MERGE (s:Speciality {id: event.after.id}) SET s.name = event.after.name, s.department_id = event.after.department_id",
    "neo4j.topic.cypher.postgres.public.courses": "MERGE (c:Course {id: event.after.id}) SET c.name = event.after.name, c.speciality_id = event.after.speciality_id",
    "neo4j.topic.cypher.postgres.public.lectures": "MERGE (l:Lecture {id: event.after.id}) SET l.topic = event.after.topic, l.date = event.after.date, l.course_id = event.after.course_id",
    "neo4j.topic.cypher.postgres.public.schedules": "MERGE (sc:Schedule {id: event.after.id}) SET sc.group_id = event.after.group_id, sc.lecture_id = event.after.lecture_id",
    "neo4j.topic.cypher.postgres.public.visits": "MERGE (v:Visit {id: event.after.id}) SET v.student_id = event.after.student_id, v.lecture_id = event.after.lecture_id, v.is_present = event.after.is_present",
    "neo4j.topic.cypher.postgres.public.materials": "MERGE (m:Material {id: event.after.id}) SET m.name = event.after.name, m.url = event.after.url, m.lecture_id = event.after.lecture_id"
  }
} 