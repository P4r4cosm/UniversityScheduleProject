{
  "name": "neo4j-sink",
  "config": {
    "connector.class": "org.neo4j.connectors.kafka.sink.Neo4jConnector",
    "tasks.max": "1",
    "topics": "postgres.Universities,postgres.Institutes,postgres.Departments,postgres.Groups,postgres.Students,postgres.Courses,postgres.Lectures,postgres.Schedules,postgres.Visits,postgres.Specialities,postgres.Users,postgres.Materials",
    "neo4j.uri": "bolt://neo4j:7687",
    "neo4j.authentication.basic.username": "neo4j",
    "neo4j.authentication.basic.password": "61323F1nigan",
    "neo4j.topic.cypher.postgres.Universities": "MERGE (n:University {Id event.Id) SET n.name = event.name, n.city = event.city",
    "neo4j.topic.cypher.postgres.Institutes": "MERGE (i:Institute {Id event.Id) SET i.name = event.name WITH i MATCH (u:University {Id event.universityid}) MERGE (i)-[:BELONGS_TO]->(u)",
    "neo4j.topic.cypher.postgres.Departments": "MERGE (d:Department {Id event.Id) SET d.name = event.name WITH d MATCH (i:Institute {Id event.instituteid}) MERGE (d)-[:BELONGS_TO]->(i)",
    "neo4j.topic.cypher.postgres.Groups": "MERGE (g:Group {Id event.Id) SET g.name = event.name, g.startyear = event.startyear, g.endyear = event.endyear WITH g MATCH (d:Department {Id event.departmentid}) MERGE (g)-[:BELONGS_TO]->(d)",
    "neo4j.topic.cypher.postgres.Students": "MERGE (s:Student {Id event.Id) SET s.fullname = event.fullname, s.dateofrecipient = event.dateofrecipient WITH s MATCH (g:Group {Id event.groupid}) MERGE (s)-[:BELONGS_TO]->(g)",
    "neo4j.topic.cypher.postgres.Courses": "MERGE (c:Course {Id event.Id) SET c.name = event.name",
    "neo4j.topic.cypher.postgres.Lectures": "MERGE (l:Lecture {Id event.Id) SET l.name = event.name, l.year = event.year WITH l MATCH (c:Course {Id event.courseid}) MERGE (l)-[:PART_OF]->(c)",
    "neo4j.topic.cypher.postgres.Schedules": "MERGE (s:Schedule {Id event.Id) SET s.starttime = event.starttime, s.endtime = event.endtime WITH s MATCH (g:Group {Id event.groupid}) MERGE (s)-[:FOR_GROUP]->(g) WITH s MATCH (l:Lecture {Id event.lectureid}) MERGE (s)-[:IS_LECTURE]->(l)",
    "neo4j.topic.cypher.postgres.Visits": "MATCH (st:Student {Id event.studentid}), (sc:Schedule {Id event.scheduleid}) MERGE (st)-[r:ATTENDED]->(sc) SET r.Id= event.Id r.visittime = event.visittime",
    "neo4j.topic.cypher.postgres.Specialities": "MERGE (s:Speciality {Id event.Id) SET s.name = event.name, s.code = event.code",
    "neo4j.topic.cypher.postgres.Users": "MERGE (u:User {Id event.Id) SET u.username = event.username",
    "neo4j.topic.cypher.postgres.Materials": "MERGE (m:Material {Id event.Id)",
    "key.converter": "org.apache.kafka.connect.json.JsonConverter",
    "key.converter.schemas.enable": "false",
    "value.converter": "org.apache.kafka.connect.json.JsonConverter",
    "value.converter.schemas.enable": "false",
    "errors.retry.timeout": "-1",
    "errors.retry.delay.max.ms": "1000",
    "errors.tolerance": "all",
    "errors.log.enable": "true",
    "errors.log.include.messages": "true"
  }
} 